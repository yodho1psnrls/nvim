-- F7 will Generate both Debug and Release Directories
-- F5 will Build the Debug directory and launch dap
-- F6 will Build the Release directory and launch the exe, without a debugger

-- All those functions expect that the cwd is set on the root directory of the project !

-- TODO: Fix the creation of the symlink of the new project

-- Thats not necessary, there is already a neovim command :wa that does exactly the same
--[[
function SaveAllBuffers()
  -- Get the list of all buffers
  for _, buf in ipairs(vim.api.nvim_list_bufs()) do
    -- Check if the buffer is valid and modified
    if vim.api.nvim_buf_is_valid(buf) and vim.api.nvim_buf_get_option(buf, 'modifiable') and vim.api.nvim_buf_get_option(buf, 'modified') then
      -- Save the buffer
      vim.api.nvim_buf_call(buf, function()
        vim.cmd('write')
      end)
    end
  end
end

-- Set a keymap to trigger the SaveAllBuffers function (optional)
--vim.keymap.set('n', '<leader>wa', SaveAllBuffers)
]] --


function GenerateCMake()
  --local cwd = vim.fn.getcwd()
  --os.execute('cd ' .. vim.fn.getcwd())

  os.execute('rmdir /s /q "Debug"')
  os.execute('rmdir /s /q "Release"')
  --os.execute('rm -rf "Debug"')
  --os.execute('rm -rf "Release"')

  os.execute('cmake -S . -B "Debug" -DCMAKE_BUILD_TYPE=Debug')
  os.execute('cmake -S . -B "Release" -DCMAKE_BUILD_TYPE=Release')
  --os.execute('cmake -S . -B build/Debug -DCMAKE_BUILD_TYPE=Debug')
  --os.execute('cmake -S . -B build/Release -DCMAKE_BUILD_TYPE=Release')

  -- Create a symlink for clangd to work properly
  --https://www.howtogeek.com/16226/complete-guide-to-symbolic-links-symlinks-on-windows-or-linux/
  os.execute('mklink "Debug\\compile_commands.json" "compile_commands.json"')
end

function BuildAndRunRelease()
  vim.cmd('wa')

  --os.execute('cd ' .. vim.fn.getcwd())

  --if not os.execute('cmake --build "Release" --config Release') then
  --  print("Failed to Build Release executable")
  --end
  --os.execute('cmake --build build/Release --config Release')

  vim.cmd('!cmake --build Release --config Release')

  --if not os.execute('".\\Release\\bin\\proj.exe"') then
  --  print("Failed to Run Release executable")
  --end

  vim.cmd('!".\\Release\\bin\\proj.exe"')
  --vim.cmd('silent "!.\\Release\\bin\\proj.exe"')
end

function BuildAndRunDebug()
  vim.cmd('wa')
  --os.execute('cd ' .. vim.fn.getcwd())

  if not os.execute('cmake --build "Debug" --config Debug') then
    print("Failed to Build Debug executable")
  end
  --os.execute('cmake --build build/Debug --config Debug')

  require('dap').continue()
end

vim.keymap.set('n', '<F7>', function() GenerateCMake() end)
vim.keymap.set('n', '<F6>', function() BuildAndRunRelease() end)
vim.keymap.set('n', '<F5>', function() BuildAndRunDebug() end)
