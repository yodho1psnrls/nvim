-- F7 will Generate both Debug and Release Directories
-- F5 will Build the Debug directory and launch dap
-- F6 will Build the Release directory and launch the exe, without a debugger

-- All those functions expect that the cwd is set on the root directory of the project !

-- TODO: Fix the creation of the symlink of the new project

-- https://neovim.discourse.group/t/how-to-new-a-terminal-and-send-to-run-command-with-lua/4218
-- https://stackoverflow.com/questions/7597249/vim-script-how-to-execute-a-command-in-a-vim-function
-- https://neovim.discourse.group/t/how-to-new-a-terminal-and-send-to-run-command-with-lua/4218

local build_term_buf = nil
local dap = require('dap')

-------------------------------------------------------------------------

function OpenTerminal()
  -- Check if the terminal buffer exists and is valid
  if build_term_buf == nil or not vim.api.nvim_buf_is_valid(build_term_buf) then
    -- Create a new terminal buffer in a vertical split if it doesn't exist
    --vim.cmd("vsplit")
    vim.cmd("10split")
    vim.cmd("terminal")
    build_term_buf = vim.api.nvim_get_current_buf()
  else
    -- Check if the terminal buffer is currently displayed in any window
    local term_win = nil
    for _, win in ipairs(vim.api.nvim_list_wins()) do
      if vim.api.nvim_win_get_buf(win) == build_term_buf then
        term_win = win
        break
      end
    end

    if term_win then
      -- If the terminal is open in a window, switch to that window
      vim.api.nvim_set_current_win(term_win)
    else
      -- If the terminal is not visible, reopen it in a split
      vim.cmd("10split")
      vim.api.nvim_set_current_buf(build_term_buf)
    end
  end
end

function RunInBuildTerminal(commands)
  -- Ensure terminal is open
  OpenTerminal()

  local function execute_command(cmd, callback)
    -- Start a job for the command
    local job_id = vim.fn.jobstart(cmd, {
      on_exit = function(_, return_code)
        if return_code == 0 then
          if callback then callback() end -- Execute the callback if successful
        else
          print("Command failed: " .. cmd)
        end
      end,
      stdout_buffered = true,
      stderr_buffered = true,
      on_stdout = function(_, data)
        if data and #data > 0 then
          for _, line in ipairs(data) do
            print(line) -- Print stdout output to Neovim
          end
        end
      end,
      on_stderr = function(_, data)
        if data and #data > 0 then
          for _, line in ipairs(data) do
            print("Error: " .. line) -- Print stderr output to Neovim
          end
        end
      end,
    })

    -- Send the command to the terminal
    vim.api.nvim_chan_send(vim.b.terminal_job_id, cmd .. "\r")
  end

  -- Function to execute commands in sequence
  local function execute_commands(index)
    if index > #commands then
      --print("-------------------------------------------------")
      --vim.api.nvim_chan_send(vim.b.terminal_job_id, "-------------------------------------------------\r\n")
      return -- No more commands to execute
    end

    local cmd = commands[index]
    execute_command(cmd, function() -- Callback to execute next command
      execute_commands(index + 1)
      --execute_commands(index + 1)
    end)
  end

  execute_commands(1) -- Start executing from the first command
end

--------------------------------------------------------------------

local generate_cmake_commands = {
  'rm -rf "Debug"',                                               -- Remove Debug directory
  'rm -rf "Release"',                                             -- Remove Release directory
  'cmake -S . -B "Debug" -DCMAKE_BUILD_TYPE=Debug',               -- Generate Debug build files
  'cmake -S . -B "Release" -DCMAKE_BUILD_TYPE=Release',           -- Generate Release build files
  -- 'ln -s "Debug/compile_commands.json" "compile_commands.json"'  -- Create symlink (Linux/macOS)
  'mklink "Debug\\compile_commands.json" "compile_commands.json"' -- Create symlink (Windows)
}


local build_and_run_cpp_commands = {
  'cmake --build "Release" --config Release',
  '.\\Release\\bin\\proj.exe'
}

local build_and_debug_cpp_commands = {
  'cmake --build "Debug" --config Debug',
  '.\\Debug\\bin\\proj.exe'
}

local run_python_commands = {
  'python %'
}


local debug_python_commands = {
  'python %'
}

------------------------------------------------------------------------

function GenerateCMake()
  vim.cmd('!rm -rf "Debug"')
  vim.cmd('!rm -rf "Release"')

  vim.cmd('!cmake -S . -B "Debug" -DCMAKE_BUILD_TYPE=Debug')
  vim.cmd('!cmake -S . -B "Release" -DCMAKE_BUILD_TYPE=Release')

  -- Create a symlink for clangd to work properly
  --https://www.howtogeek.com/16226/complete-guide-to-symbolic-links-symlinks-on-windows-or-linux/
  vim.cmd('!mklink "Debug\\compile_commands.json" "compile_commands.json"')
end

function BuildAndRunCpp()
  -- Non-Blocking version of the above
  vim.fn.jobstart('cmake --build Release --config Release', {
    on_exit = function(_, exit_code)
      if exit_code == 0 then
        -- If successful, run the executable in a terminal
        vim.cmd('term .\\Release\\bin\\proj.exe')
      else
        -- Print an error message if the build failed
        print("Build failed with exit code: " .. exit_code)
      end
    end
  })
end

function BuildAndDebugCpp()
  -- Non-Blocking version of the above
  vim.fn.jobstart('cmake --build "Debug" --config Debug', {
    on_exit = function(_, exit_code)
      if exit_code == 0 then
        -- If successful, debug the executable
        dap.continue()
      else
        -- Print an error message if the build failed
        print("Build failed with exit code: " .. exit_code)
      end
    end
  })
end

------------------------------------------------------------------------
-- There is no Building for python, but i want to keep the names consistent

function BuildAndRunPython()
  vim.cmd('term python %')
end

function BuildAndDebugPython()
  dap.continue()
end

------------------------------------------------------------------------


function BuildAndRun()
  vim.cmd('wa') -- Save all buffers

  local filetype = vim.bo.filetype

  if filetype == 'cpp' then
    BuildAndRunCpp()
  elseif filetype == 'python' then
    BuildAndRunPython()
  else
    print("No Build and Run Configuration for File Type: " .. filetype)
  end
end

function BuildAndDebug()
  vim.cmd('wa') -- Save all buffers

  local filetype = vim.bo.filetype

  if filetype == 'cpp' then
    BuildAndDebugCpp()
  elseif filetype == 'python' then
    BuildAndDebugPython()
  else
    print("No Build and Debug Configuration for File Type: " .. filetype)
  end
end

------------------------------------------------------------------------

vim.keymap.set('n', '<F7>', function() GenerateCMake() end) -- Only for CPP
vim.keymap.set('n', '<F6>', function() BuildAndRun() end)
vim.keymap.set('n', '<F5>', function() BuildAndDebug() end)
