-- https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt
-- https://www.reddit.com/r/neovim/comments/zs8igk/how_do_i_set_up_gdb_with_dap/
-- https://github.com/mfussenegger/nvim-dap/wiki/C-C---Rust-(gdb-via--vscode-cpptools)
-- https://www.youtube.com/watch?v=oYzZxi3SSnM
-- https://www.youtube.com/watch?v=lyNfnI-B640
-- https://www.youtube.com/watch?v=RziPWdTzSV8

-- https://github.com/mfussenegger/nvim-dap/issues/1206
-- https://github.com/mfussenegger/nvim-dap/issues/1150

return {

  {
    "mfussenegger/nvim-dap",
    dependencies = {
      "nvim-neotest/nvim-nio",
      "rcarriga/nvim-dap-ui",
      'theHamsta/nvim-dap-virtual-text',
    },

    config = function()
      local dap = require("dap")
      local dapui = require("dapui")

      -- use nvim-dap events to open and close the windows automatically (:help dap-extensions)
      dap.listeners.before.attach.dapui_config = function()
        dapui.open()
      end
      dap.listeners.before.launch.dapui_config = function()
        dapui.open()
      end
      dap.listeners.before.event_terminated.dapui_config = function()
        dapui.close()
      end
      dap.listeners.before.event_exited.dapui_config = function()
        dapui.close()
      end

      ------------------------------------------------------------------------------

      dap.adapters.python = function(cb, config)
        if config.request == 'attach' then
          ---@diagnostic disable-next-line: undefined-field
          local port = (config.connect or config).port
          ---@diagnostic disable-next-line: undefined-field
          local host = (config.connect or config).host or '127.0.0.1'
          cb({
            type = 'server',
            port = assert(port, '`connect.port` is required for a python `attach` configuration'),
            host = host,
            options = {
              source_filetype = 'python',
            },
          })
        else
          cb({
            type = 'executable',
            --command = 'D:/Program Files/python_3_12/Scripts/debugpy.exe',
            command = 'debugpy',
            --args = { '-m', 'debugpy.adapter', '-Xfrozen_modules=off' },
            options = {
              source_filetype = 'python',
            },
          })
        end
      end


      dap.configurations.python = {
        {
          -- The first three options are required by nvim-dap
          type = 'python', -- the type here established the link to the adapter definition: `dap.adapters.python`
          request = 'launch',
          name = "Launch file",

          -- Options below are for debugpy, see https://github.com/microsoft/debugpy/wiki/Debug-configuration-settings for supported options

          program = "${file}", -- This configuration will launch the current file if used.
          pythonPath = function()
            -- debugpy supports launching an application with a different interpreter then the one used to launch debugpy itself.
            -- The code below looks for a `venv` or `.venv` folder in the current directly and uses the python within.
            -- You could adapt this - to for example use the `VIRTUAL_ENV` environment variable.
            local cwd = vim.fn.getcwd()
            if vim.fn.executable(cwd .. '/venv/bin/python') == 1 then
              return cwd .. '/venv/bin/python'
            elseif vim.fn.executable(cwd .. '/.venv/bin/python') == 1 then
              return cwd .. '/.venv/bin/python'
            else
              --return '/usr/bin/python'
              return 'python'
            end
          end,
        },
      }

      -------------------------------------------------------------------------------

      dap.adapters.gdb = {
        type = "executable",
        command = "gdb",
        --args = { "--interpreter=dap", "--eval-command", "set print pretty on" }
        --args = { '--interpreter=mi2' },
        args = { "-i", "dap" },
      }


      dap.configurations.cpp = {
        {
          name = "Launch CPP",
          type = "gdb",

          --type = "cppdbg",
          --MIMode = "gdb",
          --miDebuggerPath = "gdb",

          request = "launch",
          program = function()
            return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file')
          end,
          cwd = "${workspaceFolder}",
          stopAtBeginningOfMainSubprogram = false,
          --stopAtEntry = true,
        },
        --[[
        {
          name = "Select and attach to process",
          type = "gdb",
          request = "attach",
          program = function()
            return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file')
          end,
          pid = function()
            local name = vim.fn.input('Executable name (filter): ')
            return require("dap.utils").pick_process({ filter = name })
          end,
          cwd = '${workspaceFolder}'
        },
        {
          name = 'Attach to gdbserver :1234',
          type = 'gdb',
          request = 'attach',
          target = 'localhost:1234',
          program = function()
            return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file')
          end,
          cwd = '${workspaceFolder}'
        },
        ]] --
      }

      -- Use the same setup for C++ files as for C
      dap.configurations.c = dap.configurations.cpp

      ----------------------------------------------------------------------------------------

      require("nvim-dap-virtual-text").setup {
        enabled = true,                     -- enable this plugin (the default)
        enabled_commands = true,            -- create commands DapVirtualTextEnable, DapVirtualTextDisable, DapVirtualTextToggle, (DapVirtualTextForceRefresh for refreshing when debug adapter did not notify its termination)
        highlight_changed_variables = true, -- highlight changed values with NvimDapVirtualTextChanged, else always NvimDapVirtualText
        highlight_new_as_changed = false,   -- highlight new variables in the same way as changed variables (if highlight_changed_variables)
        show_stop_reason = true,            -- show stop reason when stopped for exceptions
        commented = false,                  -- prefix virtual text with comment string
        only_first_definition = true,       -- only show virtual text at first definition (if there are multiple)
        all_references = false,             -- show virtual text on all all references of the variable (not only definitions)
        clear_on_continue = false,          -- clear virtual text on "continue" (might cause flickering when stepping)
        --- A callback that determines how a variable is displayed or whether it should be omitted
        --- @param variable Variable https://microsoft.github.io/debug-adapter-protocol/specification#Types_Variable
        --- @param buf number
        --- @param stackframe dap.StackFrame https://microsoft.github.io/debug-adapter-protocol/specification#Types_StackFrame
        --- @param node userdata tree-sitter node identified as variable definition of reference (see `:h tsnode`)
        --- @param options nvim_dap_virtual_text_options Current options for nvim-dap-virtual-text
        --- @return string|nil A text how the virtual text should be displayed or nil, if this variable shouldn't be displayed
        display_callback = function(variable, buf, stackframe, node, options)
          -- by default, strip out new line characters
          if options.virt_text_pos == 'inline' then
            return ' = ' .. variable.value:gsub("%s+", " ")
          else
            return variable.name .. ' = ' .. variable.value:gsub("%s+", " ")
          end
        end,
        -- position of virtual text, see `:h nvim_buf_set_extmark()`, default tries to inline the virtual text. Use 'eol' to set to end of line
        virt_text_pos = vim.fn.has 'nvim-0.10' == 1 and 'inline' or 'eol',

        -- experimental features:
        all_frames = false,     -- show virtual text for all stack frames not only current. Only works for debugpy on my machine.
        virt_lines = false,     -- show virtual lines instead of virtual text (will flicker!)
        virt_text_win_col = nil -- position the virtual text at a fixed window column (starting from the first text column) ,
        -- e.g. 80 to position at column 80, see `:h nvim_buf_set_extmark()`
      }

      -------------------------------------------------------------------------------------

      --[[
      -- Dap UI setup
      -- For more information, see |:help nvim-dap-ui|
      dapui.setup {
        -- Set icons to characters that are more likely to work in every terminal.
        --    Feel free to remove or use ones that you like more! :)
        --    Don't feel like these are good choices.
        icons = { expanded = '▾', collapsed = '▸', current_frame = '*' },
        controls = {
          icons = {
            pause = '⏸',
            play = '▶',
            step_into = '⏎',
            step_over = '⏭',
            step_out = '⏮',
            step_back = 'b',
            run_last = '▶▶',
            terminate = '⏹',
            disconnect = '⏏',
          },
        },
        layouts = {
          {
            elements = {
              -- Elements to display in the layout
              { id = 'scopes',      size = 0.25 },
              { id = 'breakpoints', size = 0.25 },
              { id = 'stacks',      size = 0.25 },
              { id = 'watches',     size = 0.25 },
            },
            size = 40,   -- Width of the window
            position = 'left', -- Can be 'left', 'right', 'top', 'bottom'
          },
          {
            elements = {
              { id = 'repl',    size = 0.5 },
              { id = 'console', size = 0.5 },
            },
            size = 10,     -- Height of the window
            position = 'bottom', -- Can be 'left', 'right', 'top', 'bottom'
          },
        },
        floating = {
          max_height = 0.9, -- Maximum height of floating windows
          max_width = 0.5, -- Maximum width of floating windows
          border = 'rounded', -- Border style (can be 'single', 'double', 'rounded', etc.)
          mappings = {
            close = { 'q', '<Esc>' },
          },
        },
        windows = { indent = 1 },
        render = {
          max_type_length = nil, -- Can limit the type length in the UI
        },
      }
      ]] --

      -------------------------------------------------------------------------------------

      -- keymaps
      vim.keymap.set('n', "<leader>b", dap.toggle_breakpoint, { desc = 'Debug: Toggle Breakpoint' })
      vim.keymap.set('n', "<leader>B",
        function()
          dap.set_breakpoint(vim.fn.input 'Breakpoint condition: ')
        end,
        { desc = 'Debug: Set Breakpoint' })

      vim.keymap.set('n', "<F5>", dap.continue, {})
      vim.keymap.set('n', "<F10>", dap.step_over, { desc = 'Debug: Step Over' })
      vim.keymap.set('n', "<F11>", dap.step_into, { desc = 'Debug: Step Into' })
      vim.keymap.set('n', "<S-F11>", dap.step_out, { desc = 'Debug: Step Out' })
      vim.keymap.set('n', "<F7>", dapui.toggle, { desc = 'Debug: See last session result' })
    end,
  }
}
