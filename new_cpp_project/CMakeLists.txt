cmake_minimum_required(VERSION 3.25)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Ensure that compile_commands.json is generated by CMake
# So language server protocols like clangd or ccls work properly
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# If youâ€™re making frequent changes to the code, 
#  ccache can help by caching and reusing results from previous builds.
# This will speed up rebuilds for unchanged files
#set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
# Force CMake to use ccache with Clang
#set(CMAKE_C_COMPILER_LAUNCHER ccache)
#set(CMAKE_CXX_COMPILER_LAUNCHER ccache)

# Consider Precompiling the Headers in the future
#target_precompile_headers(your_target PRIVATE <header_file>)

project(proj)


# Link-Time Optimization (LTO) improves runtime performance,
#  but it significantly slows down compilation
#set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)

#   if(CMAKE_BUILD_TYPE STREQUAL "Release_O3")
#       set(CMAKE_INTERPROCEDURAL_OPTIMIZATION ON)
#   else()
#       set(CMAKE_INTERPROCEDURAL_OPTIMIZATION OFF)
#   endif()

# Ensure build type is Debug if not specified
#if(NOT CMAKE_BUILD_TYPE)
#    set(CMAKE_BUILD_TYPE Debug)
#endif()


# Set compiler flags for Debug builds
set(CMAKE_C_FLAGS_DEBUG "-g -O0")
set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")

#set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -g -O0")
#set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -O0")

# Single Release Build Configuration
# Maybe also add -s or -strip
# Max performance optimization flag is -03, use it for actual release
#  , but for fastest build time use -01
set(CMAKE_C_FLAGS_RELEASE "-O1 -DNDEBUG")   
set(CMAKE_CXX_FLAGS_RELEASE "-O1 -DNDEBUG")

# Two Releases, 01 is optimized for build time and 03 is optimized for run time
#   set(CMAKE_C_FLAGS_RELEASE_O1 "-O1 -DNDEBUG")
#   set(CMAKE_CXX_FLAGS_RELEASE_O1 "-O1 -DNDEBUG")
#   set(CMAKE_C_FLAGS_RELEASE_O3 "-O3 -DNDEBUG")
#   set(CMAKE_CXX_FLAGS_RELEASE_O3 "-O3 -DNDEBUG")


# Set the output directories for all configurations
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Set the output directories for specific configurations
#set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/bin)
#set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin)

# Optional: Set for libraries and archives
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)


# Include the external libraries
set(EXTERNAL_LIB_DIR "D:/libraries")
include_directories(${EXTERNAL_LIB_DIR}/include)
link_directories(${EXTERNAL_LIB_DIR}/lib)

# Add the src directory (which contains the rest of the project structure)
add_subdirectory(src)

# Add glad.c as an external source file to the existing `proj` target
target_sources(proj PRIVATE ${EXTERNAL_LIB_DIR}/src/glad/glad.c)
# Use `GL` for Linux or `opengl32` for Windows
target_link_libraries(proj glfw3 opengl32)
